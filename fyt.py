import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, \
    InlineKeyboardMarkup
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from states import RegisterStates, PhotoUpdateState, SearchStates, FilterStates
from db import init_db, save_profile, get_profile, update_photo, get_random_profile, get_unseen_profile, \
    get_profile_by_id, delete_profile, get_profiles_by_filters
from aiogram.types import CallbackQuery

TOKEN = '8061407851:AAEIM5-UBABJUvmEiOUbky2suNuurLzXmCI'

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
init_db()

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫"), KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")],
        [KeyboardButton(text="üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"), KeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")]
    ],
    resize_keyboard=True
)

register_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

search_menu = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üí§ –ü–µ—Ä–µ—Ä—ã–≤")]],
    resize_keyboard=True
)

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    if get_profile(message.from_user.id):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø - –±–æ—Ç Find Your Team."
                             "\n\n‚ùó–ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ "
                             "–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.\nüîí –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.\n"
                             "‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—è –∞–Ω–∫–µ—Ç—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –µ—ë –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –≤ —Ü–µ–ª—è—Ö –ø–æ–∏—Å–∫–∞ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤/–∫–æ–º–∞–Ω–¥—ã.",
                             reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")]],
                                                              resize_keyboard=True)
                             )

@dp.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é")
async def confirmed_consent(message: Message, state: FSMContext):
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ /register", reply_markup=ReplyKeyboardRemove())
    await state.clear()

@dp.message(F.text == "/register")
async def start_register(message: Message, state: FSMContext):
    if get_profile(message.from_user.id):
        await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=register_menu)
    else:
        await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterStates.name)

@dp.message(RegisterStates.name)
async def get_name(message: Message, state: FSMContext):
    if not message.text:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º.")
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        return await cancel_registration(message, state)
    await state.update_data(name=message.text)
    if get_profile(message.from_user.id):
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã "
                             "- —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞–º –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –≤–∞—Å!",
                             reply_markup=register_menu)
    else:
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã "
                             "- —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞–º –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –≤–∞—Å!",
                             reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterStates.city)

@dp.message(RegisterStates.city)
async def get_city(message: Message, state: FSMContext):
    if not message.text:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º.")
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        return await cancel_registration(message, state)
    await state.update_data(city=message.text)
    if get_profile(message.from_user.id):
        await message.answer("–ö–∞–∫–∏–µ —É –≤–∞—Å –Ω–∞–≤—ã–∫–∏? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", reply_markup=register_menu)
    else:
        await message.answer("–ö–∞–∫–∏–µ —É –≤–∞—Å –Ω–∞–≤—ã–∫–∏? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterStates.skills)

@dp.message(RegisterStates.skills)
async def get_skills(message: Message, state: FSMContext):
    if not message.text:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ —Ç–µ–∫—Å—Ç–æ–º.")
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        return await cancel_registration(message, state)
    await state.update_data(skills=message.text)
    if get_profile(message.from_user.id):
        await message.answer("–ö–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—É?", reply_markup=register_menu)
    else:
        await message.answer("–ö–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥—É?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterStates.looking_for)

@dp.message(RegisterStates.looking_for)
async def get_target(message: Message, state: FSMContext):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        return await cancel_registration(message, state)
    if not message.text:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ, —Ç–µ–∫—Å—Ç–æ–º.")
    await state.update_data(looking_for=message.text)
    if get_profile(message.from_user.id):
        await message.answer("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –ª–µ—Ç –æ–ø—ã—Ç–∞? (–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É/—á–∏—Å–ª–æ)\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∞—à "
                             "—Ä–µ–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞–º –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –≤–∞—Å!",
                             reply_markup=register_menu)
    else:
        await message.answer("–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –ª–µ—Ç –æ–ø—ã—Ç–∞? (–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É/—á–∏—Å–ª–æ)\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∞—à "
                             "—Ä–µ–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞–º –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –≤–∞—Å!",
                             reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterStates.experience)


@dp.message(RegisterStates.experience)
async def get_experience(message: Message, state: FSMContext):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        return await cancel_registration(message, state)
    if not message.text.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–∂ –≤ –≤–∏–¥–µ —Ü–∏—Ñ—Ä—ã/—á–∏—Å–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 2")
    if int(message.text) >= 100:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞–∂!")

    try:
        exp = int(message.text)
        if exp < 0:
            raise ValueError
        await state.update_data(experience=exp)
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ª–µ—Ç –æ–ø—ã—Ç–∞.")

    if get_profile(message.from_user.id):
        await message.answer("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
                             reply_markup=register_menu)
    else:
        await message.answer("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
                             reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterStates.photo_id)

@dp.message(RegisterStates.photo_id, F.photo)
async def get_photo(message: Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    if get_profile(message.from_user.id):
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=register_menu)
    else:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterStates.description)

@dp.message(RegisterStates.photo_id, F.text == "/skip")
async def skip_photo(message: Message, state: FSMContext):
    await state.update_data(photo_id=None)
    if get_profile(message.from_user.id):
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=register_menu)
    else:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegisterStates.description)

@dp.message(RegisterStates.photo_id)
async def invalid_photo_input(message: Message):
    if get_profile(message.from_user.id):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
                         reply_markup=register_menu)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
                             reply_markup=ReplyKeyboardRemove())

@dp.message(RegisterStates.photo_id, F.text == "üö´ –û—Ç–º–µ–Ω–∞")
async def cancel_photo_upload(message: Message, state: FSMContext):
    await cancel_registration(message, state)

@dp.message(RegisterStates.description)
async def get_description(message: Message, state: FSMContext):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        return await cancel_registration(message, state)
    if not message.text:
        if get_profile(message.from_user.id):
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=register_menu)
        else:
            return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=ReplyKeyboardRemove())
    await state.update_data(description=message.text)
    data = await state.get_data()

    save_profile(
        user_id=message.from_user.id,
        name=data['name'],
        city=data['city'],
        skills=data['skills'],
        looking_for=data['looking_for'],
        experience=data['experience'],
        description=data['description'],
        photo_id=data.get('photo_id')
    )

    await message.answer("üìä –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=main_menu)
    await state.clear()

@dp.message(F.text == "üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def my_profile(message: Message):
    profile = get_profile(message.from_user.id)
    if profile:
        _, name, city, skills, looking_for, experience, description, photo_id = profile
        if photo_id:
            await message.answer_photo(photo_id, caption=(
                f"<b>–ò–º—è:</b> {name}\n"
                f"<b>–ì–æ—Ä–æ–¥:</b> {city}\n"
                f"<b>–ù–∞–≤—ã–∫–∏:</b> {skills}\n"
                f"<b>–ò—â–µ—Ç:</b> {looking_for}\n"
                f"<b>–°—Ç–∞–∂ (–≤ –≥–æ–¥–∞—Ö):</b> {experience}\n"
                f"<b>–û —Å–µ–±–µ:</b> {description}"
            ))
        else:
            await message.answer(
                f"<b>–ò–º—è:</b> {name}\n"
                f"<b>–ì–æ—Ä–æ–¥:</b> {city}\n"
                f"<b>–ù–∞–≤—ã–∫–∏:</b> {skills}\n"
                f"<b>–ò—â–µ—Ç:</b> {looking_for}\n"
                f"<b>–°—Ç–∞–∂ (–≤ –≥–æ–¥–∞—Ö):</b> {experience}\n"
                f"<b>–û —Å–µ–±–µ:</b> {description}"
            )
    else:
        await message.answer("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –ù–∞–ø–∏—à–∏—Ç–µ /register")

@dp.message(F.text == "üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
async def change_photo(message: Message, state: FSMContext):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        return await cancel_registration(message, state)
    await message.answer("–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É. \n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:", reply_markup=register_menu)
    await state.set_state(PhotoUpdateState.waiting_for_photo)

@dp.message(PhotoUpdateState.waiting_for_photo, F.photo)
async def update_user_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    update_photo(message.from_user.id, photo_id)
    await message.answer("üì∑ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu)
    await state.clear()

@dp.message(PhotoUpdateState.waiting_for_photo)
async def invalid_update_photo(message: Message, state: FSMContext):
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        return await cancel_registration(message, state)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä.", reply_markup=register_menu)

@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def restart_registration(message: Message, state: FSMContext):
    await message.answer("–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.\n\n–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:", reply_markup=register_menu)
    await start_register(message, state)

@dp.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞")
async def cancel_registration(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

@dp.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def start_search(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:",
                         reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üîé –í—Å–µ –∞–Ω–∫–µ—Ç—ã"),
                                                                     KeyboardButton(text="üéØ –ü–æ —Ñ–∏–ª—å—Ç—Ä—É")]],
                                                          resize_keyboard=True))

@dp.message(F.text == "üîé –í—Å–µ –∞–Ω–∫–µ—Ç—ã")
async def search_all(message: Message, state: FSMContext):
    await state.set_state(SearchStates.active_search)
    await state.update_data(seen_ids=[])
    await message.answer("–ü–æ–∏—Å–∫...", reply_markup=search_menu)
    await show_next_profile(message.from_user.id, message, state)

@dp.message(F.text == "üéØ –ü–æ —Ñ–∏–ª—å—Ç—Ä—É")
async def search_on_filters(message: Message, state: FSMContext):
    await state.set_state(FilterStates.choosing_filters)
    await state.update_data(filters={})
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π(-–µ) —Ñ–∏–ª—å—Ç—Ä(-—ã):",
                         reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üè¢ –ì–æ—Ä–æ–¥"),
                                                                     KeyboardButton(text="üìö –°—Ç–∞–∂"),
                                                                    KeyboardButton(text="üì∑ –ù–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")],
                                                                    [KeyboardButton(text="‚úÖ –°—Ç–∞—Ä—Ç"),
                                                                     KeyboardButton(text="üîÑ –°–±—Ä–æ—Å")],
                                                                     [KeyboardButton(text="üí§ –ü–µ—Ä–µ—Ä—ã–≤")]],
                                                          resize_keyboard=True))
@dp.message(FilterStates.choosing_filters, F.text == "üè¢ –ì–æ—Ä–æ–¥")
async def choose_city_filter(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.set_state(FilterStates.filter_city)

@dp.message(FilterStates.choosing_filters, F.text == "üìö –°—Ç–∞–∂")
async def choose_experience_filter(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞–∂ (—á–∏—Å–ª–æ –ª–µ—Ç):")
    await state.set_state(FilterStates.filter_experience)

@dp.message(FilterStates.choosing_filters, F.text == "üì∑ –ù–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
async def choose_photo_filter(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å —Ñ–æ—Ç–æ –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –±–µ–∑ —Ñ–æ—Ç–æ:")
    await state.set_state(FilterStates.filter_photo)

@dp.message(FilterStates.choosing_filters, F.text.in_(["‚úÖ –°—Ç–∞—Ä—Ç", "–°—Ç–∞—Ä—Ç"]))
async def start_filtering(message: Message, state: FSMContext):
    data = await state.get_data()
    filters = data.get('filters', {})
    await start_filtered_search(message, state, filters)

@dp.message(FilterStates.choosing_filters, F.text.in_(["üîÑ –°–±—Ä–æ—Å", "–°–±—Ä–æ—Å"]))
async def reset_filters(message: Message, state: FSMContext):
    await state.update_data(filters={})
    await message.answer("–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°—Ç–∞—Ä—Ç'.")

@dp.message(FilterStates.choosing_filters, F.text.in_(["üí§ –ü–µ—Ä–µ—Ä—ã–≤", "–ü–µ—Ä–µ—Ä—ã–≤"]))
async def cancel_filtering(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üí§ –ü–µ—Ä–µ—Ä—ã–≤. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

@dp.callback_query(F.data == "skip")
async def skip_filtered_or_regular(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    filters = data.get('filters')
    if filters:
        await show_next_filtered_profile(callback.from_user.id, callback.message, state, filters)
    else:
        await show_next_profile(callback.from_user.id, callback.message, state)
    await callback.answer()

@dp.message(FilterStates.filter_city)
async def input_city(message: Message, state: FSMContext):
    city = message.text.strip()
    data = await state.get_data()
    filters = data.get('filters', {})
    filters['city'] = city
    await state.update_data(filters=filters)
    await message.answer(f"–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É '{city}' –¥–æ–±–∞–≤–ª–µ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–°—Ç–∞—Ä—Ç'.")
    await state.set_state(FilterStates.choosing_filters)

@dp.message(FilterStates.filter_experience)
async def input_experience(message: Message, state: FSMContext):
    try:
        exp = int(message.text.strip())
        if exp < 0:
            raise ValueError
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–∂–∞.")
    data = await state.get_data()
    filters = data.get('filters', {})
    filters['experience'] = exp
    await state.update_data(filters=filters)
    await message.answer(f"–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞–∂—É –æ—Ç {exp} –ª–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–°—Ç–∞—Ä—Ç'.")
    await state.set_state(FilterStates.choosing_filters)

@dp.message(FilterStates.filter_photo)
async def input_photo_filter(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    if text in ('–¥–∞', 'yes', '–µ—Å—Ç—å', 'y'):
        has_photo = True
    elif text in ('–Ω–µ—Ç', 'no', '–Ω–µ—Ç—É', 'n'):
        has_photo = False
    else:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
    data = await state.get_data()
    filters = data.get('filters', {})
    filters['has_photo'] = has_photo
    await state.update_data(filters=filters)
    await message.answer(f"–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ '{'–µ—Å—Ç—å' if has_photo else '–Ω–µ—Ç'}' –¥–æ–±–∞–≤–ª–µ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–°—Ç–∞—Ä—Ç'.")
    await state.set_state(FilterStates.choosing_filters)

async def start_filtered_search(message: Message, state: FSMContext, filters: dict):
    await state.set_state(FilterStates.searching)
    await state.update_data(seen_ids=[])
    await message.answer("–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...", reply_markup=search_menu)
    curr_user_id = message.from_user.id
    filters["exclude_user_id"] = curr_user_id
    await show_next_filtered_profile(message.from_user.id, message, state, filters)

async def show_next_filtered_profile(user_id: int, message: Message, state: FSMContext, filters: dict):
    data = await state.get_data()
    seen_ids = data.get('seen_ids', [])
    last_msg_id = data.get('last_filtered_profile_msg_id')

    if last_msg_id:
        try:
            await message.bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=last_msg_id,
                reply_markup=None
            )
        except:
            pass

    exclude_ids = seen_ids + [user_id]

    profiles = get_profiles_by_filters(
        city=filters.get('city'),
        experience=filters.get('experience'),
        has_photo=filters.get('has_photo'),
        exclude_ids=exclude_ids
    )
    if not profiles:
        await message.answer("üò¢ –ê–Ω–∫–µ—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –≤—ã –≤—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏. "
                             "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        await state.clear()
        return

    profile = profiles[0]
    seen_ids.append(profile[0])
    await state.update_data(seen_ids=seen_ids)

    _, name, city, skills, looking_for, experience, description, photo_id = profile
    caption = (
        f"<b>–ò–º—è:</b> {name}\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> {city}\n"
        f"<b>–ù–∞–≤—ã–∫–∏:</b> {skills}\n"
        f"<b>–ò—â–µ—Ç:</b> {looking_for}\n"
        f"<b>–°—Ç–∞–∂ (–≤ –≥–æ–¥–∞—Ö):</b> {experience}\n"
        f"<b>–û —Å–µ–±–µ:</b> {description}"
    )

    markup = get_search_inline_keyboard(profile[0])
    if photo_id:
        sent_msg = await message.answer_photo(photo_id, caption=caption, reply_markup=markup)
    else:
        sent_msg = await message.answer(caption, reply_markup=markup)
    await state.update_data(last_filtered_profile_msg_id=sent_msg.message_id)

@dp.message(F.text == "üí§ –ü–µ—Ä–µ—Ä—ã–≤")
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

async def show_next_profile(user_id: int, message: Message, state: FSMContext):
    data = await state.get_data()
    seen_ids = data.get('seen_ids', [])
    profile = get_unseen_profile(user_id, seen_ids)
    if not profile:
        await message.answer("üò¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã –≤—Å–µ –∞–Ω–∫–µ—Ç—ã. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)
        return

    seen_ids.append(profile[0])
    await state.update_data(seen_ids=seen_ids)

    _, name, city, skills, looking_for, experience, description, photo_id = profile
    caption = (
        f"<b>–ò–º—è:</b> {name}\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> {city}\n"
        f"<b>–ù–∞–≤—ã–∫–∏:</b> {skills}\n"
        f"<b>–ò—â–µ—Ç:</b> {looking_for}\n"
        f"<b>–°—Ç–∞–∂ (–≤ –≥–æ–¥–∞—Ö):</b> {experience}\n"
        f"<b>–û —Å–µ–±–µ:</b> {description}"
    )

    markup = get_search_inline_keyboard(profile[0])  # profile[0] = user_id –∞–Ω–∫–µ—Ç—ã

    previous_msg_id = data.get("last_profile_msg_id")
    if previous_msg_id:
        try:
            await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=previous_msg_id, reply_markup=None)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏: {e}")
    if photo_id:
            sent_msg = await message.answer_photo(photo_id, caption=caption, reply_markup=markup)
    else:
        sent_msg = await message.answer(caption, reply_markup=markup)
    await state.update_data(last_profile_msg_id=sent_msg.message_id)

def get_search_inline_keyboard(profile_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü§ù –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data=f"like_{profile_id}"),
            InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="skip")
        ]
    ])

@dp.callback_query(F.data.startswith("like_"))
async def like_profile(callback: CallbackQuery, state: FSMContext):
    liked_user_id = int(callback.data.split("_")[1])
    liker_id = callback.from_user.id

    if liked_user_id == liker_id:
        await callback.answer("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —Å–µ–±—è.", show_alert=True)
        return

    liker_profile = get_profile(liker_id)
    liked_profile = get_profile_by_id(liked_user_id)

    if not liked_profile:
        await callback.answer("–ê–Ω–∫–µ—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É",
                                                                               callback_data=f"view_{liker_id}")]])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        await bot.send_message(
            chat_id=liked_user_id,
            text=f"<b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!</b>\n\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞–º–∏. "
                 f"–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ –∞–Ω–∫–µ—Ç—É –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫.", show_alert=True)

    await show_next_profile(callback.from_user.id, callback.message, state)

@dp.callback_query(F.data.startswith("view_"))
async def view_profile(callback: CallbackQuery):
    profile_id = int(callback.data.split("_")[1])
    profile = get_profile_by_id(profile_id)

    if not profile:
        await callback.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    _, name, city, skills, looking_for, experience, description, photo_id = profile
    caption = (
        f"<b>–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
        f"<b>–ò–º—è:</b> {name}\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> {city}\n"
        f"<b>–ù–∞–≤—ã–∫–∏:</b> {skills}\n"
        f"<b>–ò—â–µ—Ç:</b> {looking_for}\n"
        f"<b>–°—Ç–∞–∂:</b> {experience}\n"
        f"<b>–û —Å–µ–±–µ:</b> {description}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –•–æ—á—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å",
                callback_data=f"confirm_{profile_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç",
                callback_data=f"reject_{profile_id}"
            )
        ]
    ])

    try:
        if photo_id:
            await callback.message.answer_photo(
                photo_id,
                caption=caption,
                reply_markup=keyboard
            )
        else:
            await callback.message.answer(
                caption,
                reply_markup=keyboard
            )
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∫–µ—Ç—ã: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∫–µ—Ç—ã")

@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_match(callback: CallbackQuery):
    liker_id = int(callback.data.split("_")[1])
    confirmed_by = callback.from_user.id

    liker_profile = get_profile(liker_id)
    confirmed_profile = get_profile(confirmed_by)

    if not liker_profile or not confirmed_profile:
        await callback.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    try:
        await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                            reply_markup=None)

        await bot.send_message(
            liker_id,
            f"üéâ <b>{confirmed_profile[1]}</b> —Ç–æ–∂–µ —Ö–æ—á–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å —Å —Ç–æ–±–æ–π!\n"
            f"–í–æ—Ç –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å: @{callback.from_user.username if callback.from_user.username 
                                                        else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username'}",
            parse_mode="HTML"
        )

        liker_user = await bot.get_chat(liker_id)
        await bot.send_message(
            confirmed_by,
            f"üéâ –í–∑–∞–∏–º–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Ç—Å–≤–æ —Å <b>{liker_profile[1]}</b>!\n"
            f"–í–æ—Ç –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å: @{liker_user.username}",
            parse_mode="HTML"
        )
        await callback.answer("–°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è.", show_alert=True)


@dp.callback_query(F.data.startswith("reject_"))
async def reject_match(callback: CallbackQuery):
    partner_id = int(callback.data.split("_")[1])
    curr_user_id = callback.from_user.id

    current_profile = get_profile(curr_user_id)

    try:
        await bot.edit_message_reply_markup(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=None
        )
        rejecter_name = current_profile[1]

        await bot.send_message(
            partner_id,
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å {rejecter_name} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n"
            "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∏—Å–∫!"
        )
        await callback.answer(f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–∞–∑", show_alert=True)

@dp.callback_query(F.data == "skip")
async def skip_profile(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await show_next_profile(callback.from_user.id, callback.message, state)

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def delete_user_profile(message: Message):
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã",
                         reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
                                                                    KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]],
                                                          resize_keyboard=True))

@dp.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirmed_consent(message: Message):
    delete_profile(message.from_user.id)
    await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start.",
                         reply_markup=ReplyKeyboardRemove())
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
